apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-myapp
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: web-myapp
  template:
    metadata:
      labels:
        app.kubernetes.io/name: web-myapp
    spec:
      ###################### Shared volume and init container ##########################
      volumes:
      - name: elastic-apm-agent
        emptyDir: {}
      initContainers:
      - name: elastic-java-agent
        image: docker.elastic.co/observability/apm-agent-java:1.24.0
        volumeMounts:
        - mountPath: /elastic/apm/agent
          name: elastic-apm-agent
        command: ['cp', '-v', '/usr/agent/elastic-apm-agent.jar', '/elastic/apm/agent']
      containers:
        - name: web-myapp
          image: raulickis/web-myapp:latest
          # imagePullPolicy: "IfNotPresent"
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          livenessProbe:
            httpGet:
              path: /health/check
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /health/check
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 5
          resources:
            requests:
              cpu: "100m"
            limits:
              cpu: "800m"
              memory: "1Gi"
          ######################### Volume path and agent config ###########################
          volumeMounts:
          - mountPath: /elastic/apm/agent
            name: elastic-apm-agent
          env:
          - name: JAVA_TOOL_OPTIONS
            value: -javaagent:/elastic/apm/agent/elastic-apm-agent.jar
          envFrom:
            - configMapRef:
                name: web-myapp-config
---
apiVersion: v1
kind: Service
metadata:
  name: web-myapp
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
  selector:
    app.kubernetes.io/name: web-myapp
